bases <- c()
my_subjects <- unique(duramp$subj)
for (i in 1:length(my_subjects)) {
tmp <- subset(duramp, subj == my_subjects[i])
minf0_1 <- min(tmp$obj_f0_1, na.rm = T)
minf0_2 <- min(tmp$obj_f0_2, na.rm = T)
minf0 <- min(minf0_1, minf0_2)
bases <- append(bases, minf0)
}
bases
subset(duramp, subj == "Nsubj21" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
x <- 181
subset(duramp, subj == "Nsubj21" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
x <- 138
subset(duramp, subj == "Nsubj22" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
x <- 181
subset(duramp, subj == "Nsubj23" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
x <- 94
subset(duramp, subj == "Nsubj23" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
durampn <- read_delim("~/Desktop/german_nuclear_neutral.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
durampl <-  read_delim("~/Desktop/german_nuclear_lively.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
duramp <- rbind(durampn, durampl)
names(duramp) <- c("file", "subj_word", "obj", "subj_start", "subj_end", "subj_dur", "obj_start", "obj_end", "obj_dur", "subj_amp", "obj_amp", "subj_time_f0_1", "subj_f0_1", "subj_time_f0_2", "subj_f0_2", "obj_time_f0_1", "obj_f0_1", "obj_time_f0_2", "obj_f0_2", "prenuc_tobi", "nuc_tobi", "boundary", "notes")
rm(durampn, durampl)
# CREATE NEW COLUMNS
duramp$subj <- substr(duramp$file, 1, 7)
duramp$gender <- substr(duramp$file, 8, 8)
duramp$cond <- substr(duramp$file, 10, 12)
duramp$affect <- substr(duramp$file, 14, 15)
# PREP F0 COLUMNS
duramp$subj_f0_1 <- ifelse(duramp$subj_f0_1 == "--undefined--", "NA", duramp$subj_f0_1)
duramp$subj_f0_2 <- ifelse(duramp$subj_f0_2 == "--undefined--", "NA", duramp$subj_f0_2)
duramp$obj_f0_1 <- ifelse(duramp$obj_f0_1 == "--undefined--", "NA", duramp$obj_f0_1)
duramp$obj_f0_2 <- ifelse(duramp$obj_f0_2 == "--undefined--", "NA", duramp$obj_f0_2)
duramp$subj_f0_1 <- as.numeric(as.character(duramp$subj_f0_1))
duramp$subj_f0_2 <- as.numeric(as.character(duramp$subj_f0_2))
duramp$obj_f0_1 <- as.numeric(as.character(duramp$obj_f0_1))
duramp$obj_f0_2 <- as.numeric(as.character(duramp$obj_f0_2))
bases <- c()
my_subjects <- unique(duramp$subj)
for (i in 1:length(my_subjects)) {
tmp <- subset(duramp, subj == my_subjects[i])
minf0_1 <- min(tmp$obj_f0_1, na.rm = T)
minf0_2 <- min(tmp$obj_f0_2, na.rm = T)
minf0 <- min(minf0_1, minf0_2)
bases <- append(bases, minf0)
}
bases
x <- 123
subset(duramp, subj == "Nsubj23" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
durampn <- read_delim("~/Desktop/german_nuclear_neutral.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
durampl <-  read_delim("~/Desktop/german_nuclear_lively.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
duramp <- rbind(durampn, durampl)
names(duramp) <- c("file", "subj_word", "obj", "subj_start", "subj_end", "subj_dur", "obj_start", "obj_end", "obj_dur", "subj_amp", "obj_amp", "subj_time_f0_1", "subj_f0_1", "subj_time_f0_2", "subj_f0_2", "obj_time_f0_1", "obj_f0_1", "obj_time_f0_2", "obj_f0_2", "prenuc_tobi", "nuc_tobi", "boundary", "notes")
rm(durampn, durampl)
# CREATE NEW COLUMNS
duramp$subj <- substr(duramp$file, 1, 7)
duramp$gender <- substr(duramp$file, 8, 8)
duramp$cond <- substr(duramp$file, 10, 12)
duramp$affect <- substr(duramp$file, 14, 15)
# PREP F0 COLUMNS
duramp$subj_f0_1 <- ifelse(duramp$subj_f0_1 == "--undefined--", "NA", duramp$subj_f0_1)
duramp$subj_f0_2 <- ifelse(duramp$subj_f0_2 == "--undefined--", "NA", duramp$subj_f0_2)
duramp$obj_f0_1 <- ifelse(duramp$obj_f0_1 == "--undefined--", "NA", duramp$obj_f0_1)
duramp$obj_f0_2 <- ifelse(duramp$obj_f0_2 == "--undefined--", "NA", duramp$obj_f0_2)
duramp$subj_f0_1 <- as.numeric(as.character(duramp$subj_f0_1))
duramp$subj_f0_2 <- as.numeric(as.character(duramp$subj_f0_2))
duramp$obj_f0_1 <- as.numeric(as.character(duramp$obj_f0_1))
duramp$obj_f0_2 <- as.numeric(as.character(duramp$obj_f0_2))
bases <- c()
my_subjects <- unique(duramp$subj)
for (i in 1:length(my_subjects)) {
tmp <- subset(duramp, subj == my_subjects[i])
minf0_1 <- min(tmp$obj_f0_1, na.rm = T)
minf0_2 <- min(tmp$obj_f0_2, na.rm = T)
minf0 <- min(minf0_1, minf0_2)
bases <- append(bases, minf0)
}
bases
x <- 165
subset(duramp, subj == "Nsubj23" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
x <- 81
subset(duramp, subj == "Nsubj24" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
x <- 204
subset(duramp, subj == "Nsubj25" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
x <- 101
subset(duramp, subj == "Nsubj26" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
x <- 97
subset(duramp, subj == "Nsubj27" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
durampn <- read_delim("~/Desktop/german_nuclear_neutral.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
durampl <-  read_delim("~/Desktop/german_nuclear_lively.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
duramp <- rbind(durampn, durampl)
names(duramp) <- c("file", "subj_word", "obj", "subj_start", "subj_end", "subj_dur", "obj_start", "obj_end", "obj_dur", "subj_amp", "obj_amp", "subj_time_f0_1", "subj_f0_1", "subj_time_f0_2", "subj_f0_2", "obj_time_f0_1", "obj_f0_1", "obj_time_f0_2", "obj_f0_2", "prenuc_tobi", "nuc_tobi", "boundary", "notes")
rm(durampn, durampl)
# CREATE NEW COLUMNS
duramp$subj <- substr(duramp$file, 1, 7)
duramp$gender <- substr(duramp$file, 8, 8)
duramp$cond <- substr(duramp$file, 10, 12)
duramp$affect <- substr(duramp$file, 14, 15)
# PREP F0 COLUMNS
duramp$subj_f0_1 <- ifelse(duramp$subj_f0_1 == "--undefined--", "NA", duramp$subj_f0_1)
duramp$subj_f0_2 <- ifelse(duramp$subj_f0_2 == "--undefined--", "NA", duramp$subj_f0_2)
duramp$obj_f0_1 <- ifelse(duramp$obj_f0_1 == "--undefined--", "NA", duramp$obj_f0_1)
duramp$obj_f0_2 <- ifelse(duramp$obj_f0_2 == "--undefined--", "NA", duramp$obj_f0_2)
duramp$subj_f0_1 <- as.numeric(as.character(duramp$subj_f0_1))
duramp$subj_f0_2 <- as.numeric(as.character(duramp$subj_f0_2))
duramp$obj_f0_1 <- as.numeric(as.character(duramp$obj_f0_1))
duramp$obj_f0_2 <- as.numeric(as.character(duramp$obj_f0_2))
bases <- c()
my_subjects <- unique(duramp$subj)
for (i in 1:length(my_subjects)) {
tmp <- subset(duramp, subj == my_subjects[i])
minf0_1 <- min(tmp$obj_f0_1, na.rm = T)
minf0_2 <- min(tmp$obj_f0_2, na.rm = T)
minf0 <- min(minf0_1, minf0_2)
bases <- append(bases, minf0)
}
bases
subset(duramp, subj == "Nsubj27" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
x <- 189
subset(duramp, subj == "Nsubj27" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
x <- 179
subset(duramp, subj == "Nsubj28" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
x <- 83
subset(duramp, subj == "Nsubj29" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
durampn <- read_delim("~/Desktop/german_nuclear_neutral.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
durampl <-  read_delim("~/Desktop/german_nuclear_lively.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
duramp <- rbind(durampn, durampl)
names(duramp) <- c("file", "subj_word", "obj", "subj_start", "subj_end", "subj_dur", "obj_start", "obj_end", "obj_dur", "subj_amp", "obj_amp", "subj_time_f0_1", "subj_f0_1", "subj_time_f0_2", "subj_f0_2", "obj_time_f0_1", "obj_f0_1", "obj_time_f0_2", "obj_f0_2", "prenuc_tobi", "nuc_tobi", "boundary", "notes")
rm(durampn, durampl)
# CREATE NEW COLUMNS
duramp$subj <- substr(duramp$file, 1, 7)
duramp$gender <- substr(duramp$file, 8, 8)
duramp$cond <- substr(duramp$file, 10, 12)
duramp$affect <- substr(duramp$file, 14, 15)
# PREP F0 COLUMNS
duramp$subj_f0_1 <- ifelse(duramp$subj_f0_1 == "--undefined--", "NA", duramp$subj_f0_1)
duramp$subj_f0_2 <- ifelse(duramp$subj_f0_2 == "--undefined--", "NA", duramp$subj_f0_2)
duramp$obj_f0_1 <- ifelse(duramp$obj_f0_1 == "--undefined--", "NA", duramp$obj_f0_1)
duramp$obj_f0_2 <- ifelse(duramp$obj_f0_2 == "--undefined--", "NA", duramp$obj_f0_2)
duramp$subj_f0_1 <- as.numeric(as.character(duramp$subj_f0_1))
duramp$subj_f0_2 <- as.numeric(as.character(duramp$subj_f0_2))
duramp$obj_f0_1 <- as.numeric(as.character(duramp$obj_f0_1))
duramp$obj_f0_2 <- as.numeric(as.character(duramp$obj_f0_2))
bases <- c()
my_subjects <- unique(duramp$subj)
for (i in 1:length(my_subjects)) {
tmp <- subset(duramp, subj == my_subjects[i])
minf0_1 <- min(tmp$obj_f0_1, na.rm = T)
minf0_2 <- min(tmp$obj_f0_2, na.rm = T)
minf0 <- min(minf0_1, minf0_2)
bases <- append(bases, minf0)
}
bases
x <- 86
subset(duramp, subj == "Nsubj29" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
durampn <- read_delim("~/Desktop/german_nuclear_neutral.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
durampl <-  read_delim("~/Desktop/german_nuclear_lively.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
duramp <- rbind(durampn, durampl)
names(duramp) <- c("file", "subj_word", "obj", "subj_start", "subj_end", "subj_dur", "obj_start", "obj_end", "obj_dur", "subj_amp", "obj_amp", "subj_time_f0_1", "subj_f0_1", "subj_time_f0_2", "subj_f0_2", "obj_time_f0_1", "obj_f0_1", "obj_time_f0_2", "obj_f0_2", "prenuc_tobi", "nuc_tobi", "boundary", "notes")
rm(durampn, durampl)
# CREATE NEW COLUMNS
duramp$subj <- substr(duramp$file, 1, 7)
duramp$gender <- substr(duramp$file, 8, 8)
duramp$cond <- substr(duramp$file, 10, 12)
duramp$affect <- substr(duramp$file, 14, 15)
# PREP F0 COLUMNS
duramp$subj_f0_1 <- ifelse(duramp$subj_f0_1 == "--undefined--", "NA", duramp$subj_f0_1)
duramp$subj_f0_2 <- ifelse(duramp$subj_f0_2 == "--undefined--", "NA", duramp$subj_f0_2)
duramp$obj_f0_1 <- ifelse(duramp$obj_f0_1 == "--undefined--", "NA", duramp$obj_f0_1)
duramp$obj_f0_2 <- ifelse(duramp$obj_f0_2 == "--undefined--", "NA", duramp$obj_f0_2)
duramp$subj_f0_1 <- as.numeric(as.character(duramp$subj_f0_1))
duramp$subj_f0_2 <- as.numeric(as.character(duramp$subj_f0_2))
duramp$obj_f0_1 <- as.numeric(as.character(duramp$obj_f0_1))
duramp$obj_f0_2 <- as.numeric(as.character(duramp$obj_f0_2))
bases <- c()
my_subjects <- unique(duramp$subj)
for (i in 1:length(my_subjects)) {
tmp <- subset(duramp, subj == my_subjects[i])
minf0_1 <- min(tmp$obj_f0_1, na.rm = T)
minf0_2 <- min(tmp$obj_f0_2, na.rm = T)
minf0 <- min(minf0_1, minf0_2)
bases <- append(bases, minf0)
}
bases
x <- 102
subset(duramp, subj == "Nsubj29" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
durampn <- read_delim("~/Desktop/german_nuclear_neutral.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
durampl <-  read_delim("~/Desktop/german_nuclear_lively.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
duramp <- rbind(durampn, durampl)
names(duramp) <- c("file", "subj_word", "obj", "subj_start", "subj_end", "subj_dur", "obj_start", "obj_end", "obj_dur", "subj_amp", "obj_amp", "subj_time_f0_1", "subj_f0_1", "subj_time_f0_2", "subj_f0_2", "obj_time_f0_1", "obj_f0_1", "obj_time_f0_2", "obj_f0_2", "prenuc_tobi", "nuc_tobi", "boundary", "notes")
rm(durampn, durampl)
# CREATE NEW COLUMNS
duramp$subj <- substr(duramp$file, 1, 7)
duramp$gender <- substr(duramp$file, 8, 8)
duramp$cond <- substr(duramp$file, 10, 12)
duramp$affect <- substr(duramp$file, 14, 15)
# PREP F0 COLUMNS
duramp$subj_f0_1 <- ifelse(duramp$subj_f0_1 == "--undefined--", "NA", duramp$subj_f0_1)
duramp$subj_f0_2 <- ifelse(duramp$subj_f0_2 == "--undefined--", "NA", duramp$subj_f0_2)
duramp$obj_f0_1 <- ifelse(duramp$obj_f0_1 == "--undefined--", "NA", duramp$obj_f0_1)
duramp$obj_f0_2 <- ifelse(duramp$obj_f0_2 == "--undefined--", "NA", duramp$obj_f0_2)
duramp$subj_f0_1 <- as.numeric(as.character(duramp$subj_f0_1))
duramp$subj_f0_2 <- as.numeric(as.character(duramp$subj_f0_2))
duramp$obj_f0_1 <- as.numeric(as.character(duramp$obj_f0_1))
duramp$obj_f0_2 <- as.numeric(as.character(duramp$obj_f0_2))
bases <- c()
my_subjects <- unique(duramp$subj)
for (i in 1:length(my_subjects)) {
tmp <- subset(duramp, subj == my_subjects[i])
minf0_1 <- min(tmp$obj_f0_1, na.rm = T)
minf0_2 <- min(tmp$obj_f0_2, na.rm = T)
minf0 <- min(minf0_1, minf0_2)
bases <- append(bases, minf0)
}
bases
x <- 160
subset(duramp, subj == "Nsubj29" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
x <- 189
subset(duramp, subj == "Nsubj30" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
x <- 122
subset(duramp, subj == "Nsubj31" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
x <- 161
subset(duramp, subj == "Nsubj32" & (obj_f0_1 < x | obj_f0_2 < x)) -> tmp
View(tmp)
require(tidyverse)
require(lme4)
require(nnet)
require(brms)
require(ggthemes)
options(mc.cores=parallel::detectCores())
# /Users/eleanorchodroff/Dropbox/InformationStructureExperiment/German_Experiment/Prenuclear_Accent/analysis
durampn <- read_delim("~/Desktop/german_nuclear_neutral.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
durampl <-  read_delim("~/Desktop/german_nuclear_lively.txt", "\t", escape_double = FALSE, col_names = FALSE, locale = locale(encoding = "ISO-8859-2"), trim_ws = TRUE)
duramp <- rbind(durampn, durampl)
names(duramp) <- c("file", "subj_word", "obj", "subj_start", "subj_end", "subj_dur", "obj_start", "obj_end", "obj_dur", "subj_amp", "obj_amp", "subj_time_f0_1", "subj_f0_1", "subj_time_f0_2", "subj_f0_2", "obj_time_f0_1", "obj_f0_1", "obj_time_f0_2", "obj_f0_2", "prenuc_tobi", "nuc_tobi", "boundary", "notes")
rm(durampn, durampl)
# CREATE NEW COLUMNS
duramp$subj <- substr(duramp$file, 1, 7)
duramp$gender <- substr(duramp$file, 8, 8)
duramp$cond <- substr(duramp$file, 10, 12)
duramp$affect <- substr(duramp$file, 14, 15)
# PREP F0 COLUMNS
duramp$subj_f0_1 <- ifelse(duramp$subj_f0_1 == "--undefined--", "NA", duramp$subj_f0_1)
duramp$subj_f0_2 <- ifelse(duramp$subj_f0_2 == "--undefined--", "NA", duramp$subj_f0_2)
duramp$obj_f0_1 <- ifelse(duramp$obj_f0_1 == "--undefined--", "NA", duramp$obj_f0_1)
duramp$obj_f0_2 <- ifelse(duramp$obj_f0_2 == "--undefined--", "NA", duramp$obj_f0_2)
duramp$subj_f0_1 <- as.numeric(as.character(duramp$subj_f0_1))
duramp$subj_f0_2 <- as.numeric(as.character(duramp$subj_f0_2))
duramp$obj_f0_1 <- as.numeric(as.character(duramp$obj_f0_1))
duramp$obj_f0_2 <- as.numeric(as.character(duramp$obj_f0_2))
bases <- c()
my_subjects <- unique(duramp$subj)
for (i in 1:length(my_subjects)) {
tmp <- subset(duramp, subj == my_subjects[i])
minf0_1 <- min(tmp$obj_f0_1, na.rm = T)
minf0_2 <- min(tmp$obj_f0_2, na.rm = T)
minf0 <- min(minf0_1, minf0_2)
bases <- append(bases, minf0)
}
f2st <- function(hz, base) {
f0_st <- 12 * log2(hz / base)
return(f0_st)
}
duramp$basef0 <- NA
duramp$subj_f0_1_st <- NA
duramp$subj_f0_2_st <- NA
duramp$obj_f0_1_st <- NA
duramp$obj_f0_2_st <- NA
for (i in 1:nrow(duramp)) {
my_subj <- duramp$subj[i]
which_my_subj <- which(my_subjects == my_subj)
my_base <- bases[which_my_subj]
duramp$basef0[i] <- my_base
duramp$subj_f0_1_st[i] <- f2st(duramp$subj_f0_1[i], my_base)
duramp$subj_f0_2_st[i] <- f2st(duramp$subj_f0_2[i], my_base)
duramp$obj_f0_1_st[i] <- f2st(duramp$obj_f0_1[i], my_base)
duramp$obj_f0_2_st[i] <- f2st(duramp$obj_f0_2[i], my_base)
}
duramp$subj_f0range <- ifelse(duramp$subj_f0_1_st > duramp$subj_f0_2_st, duramp$subj_f0_1_st - duramp$subj_f0_2_st, duramp$subj_f0_2_st - duramp$subj_f0_1_st)
duramp$subj_f0slope <- (duramp$subj_f0range) / (1000*(duramp$subj_time_f0_2 - duramp$subj_time_f0_1))
duramp$obj_f0range <- ifelse(duramp$obj_f0_1 > duramp$obj_f0_2, duramp$obj_f0_1 - duramp$obj_f0_2, duramp$obj_f0_2 - duramp$obj_f0_1)
duramp$obj_f0slope <- (duramp$obj_f0_1 - duramp$obj_f0_2) / (1000*(duramp$obj_time_f0_2 - duramp$obj_time_f0_1))
# GET INTENSITY
duramp$subj_intensity <- 20 * log10(duramp$subj_amp / 0.00002)
duramp$obj_intensity <- 20 * log10(duramp$obj_amp / 0.00002)
duramp$rel_intensity <- duramp$subj_intensity - duramp$obj_intensity
# CONVERT SECONDS TO MILLISECONDS
duramp$subj_dur <- duramp$subj_dur * 1000
duramp$obj_dur <- duramp$obj_dur * 1000
duramp$pitch_accent <- ifelse(duramp$nuc_tobi %in% c("0", "L*", "na", "nv_0"), "flat", ifelse(duramp$nuc_tobi %in% c("H*", "!H*", "^H*", "!H+!H*", "^H+!H*"), "high", ifelse(duramp$nuc_tobi %in% c("L*+H", "L+H*", "H+^H*", "!H+^H*", "L*+!H", "L*+^H*", "L+!H*", "L*+^H", "L+^H*"), "rise", ifelse(duramp$nuc_tobi %in% c("H+L*", "!H+L*", "H+!H*", "^H+L*"), "fall", duramp$nuc_tobi))))
# CREATE CONTRASTS
duramp$giv <- ifelse(duramp$cond == "giv", 1, ifelse(duramp$cond == "acc", -1, 0))
duramp$new <- ifelse(duramp$cond == "new", 1, ifelse(duramp$cond == "acc", -1, 0))
duramp$contr <- ifelse(duramp$cond == "con", 1, ifelse(duramp$cond == "acc", -1, 0))
duramp$lively <- ifelse(duramp$affect == "lb", 1, -1)
duramp$rise <- ifelse(duramp$pitch_accent == "rise", 1, ifelse(duramp$pitch_accent == "flat", -1, 0))
duramp$high <- ifelse(duramp$pitch_accent == "high", 1, ifelse(duramp$pitch_accent == "flat", -1, 0))
duramp$fall <- ifelse(duramp$pitch_accent == "fall", 1, ifelse(duramp$pitch_accent == "flat", -1, 0))
# DEAL WITH PRENUCLEAR CASES
duramp$prenuclear <- ifelse(grepl("^p", duramp$nuc_tobi), "prenuclear", "nuclear")
# LOGISTIC REGRESSION FOR PRENUCLEAR ACCENTS
# can't include contrastive because there is all of 1 instance
duramp$Nprenuc <- ifelse(duramp$prenuclear == "prenuclear", 1, 0)
fit_prenuc <- brm(Nprenuc ~ giv + new + lively + giv:lively + new:lively + (1 | subj) + (1 | subj_word), family = "bernoulli", duramp)
duramp_all <- duramp
duramp <- subset(duramp, prenuclear == "nuclear")
duramp$pitch_accent <- factor(duramp$pitch_accent, levels = c("high", "rise", "fall", "flat"))
duramp$pitch_accent2 <- ifelse(duramp$pitch_accent == "flat", "fall", as.character(duramp$pitch_accent))
duramp$pitch_accent2 <- factor(duramp$pitch_accent2, levels = c("high", "rise", "fall"))
fit_multi2 <- brm(pitch_accent2 ~ 1 + giv + new + contr + lively + giv:lively + new:lively + contr:lively + (1 | subj) + (1 | subj_word), data = duramp, family = categorical(link = "logit"))
xtabs(~pitch_accent, duramp)
xtabs(~pitch_accent + nuc_tobi, duramp)
fit_multi <- brm(pitch_accent ~ 1 + giv + new + contr + lively + giv:lively + new:lively + contr:lively + (1 | subj) + (1 | subj_word), data = duramp, family = categorical(link = "logit"), iter = 5000)
fit_multi <- brm(pitch_accent ~ 1 + giv + new + contr + lively + giv:lively + new:lively + contr:lively + (1 | subj) + (1 | subj_word), data = duramp, family = categorical(link = "logit"), iter = 5000)
summary(fit_multi)
summary(duramp$obj_dur)
tmp <- subset(duramp, obj_dur > 600)
View(tmp)
tmp <- subset(duramp, obj_dur > 800)
View(tmp)
duramp$Nobj_dur <- scale(duramp$obj_dur, center = T, scale = F)
duramp$Nrel_intensity <- scale(duramp$rel_intensity, center = T, scale = F)
duramp$Nobj_f0range <- scale(duramp$obj_f0range, center = T, scale = F)
duramp$Nobj_f0slope <- scale(duramp$obj_f0range, center = T, scale = F)
# RUN LINEAR MODELS
fit_dur_brm <- brm(Nobj_dur ~ rise + high + fall + giv + new + contr + lively + rise:giv + rise:new + rise:contr +high:giv + high:new + high:contr + fall:giv + fall:new + fall:contr + rise:lively + high:lively +fall:lively + rise:giv:lively + high:giv:lively + fall:giv:lively + rise:contr:lively + high:contr:lively + fall:contr:lively + rise:new:lively + high:new:lively + fall:new:lively + (1 + lively + giv + new + contr| subj) + (1 | subj_word), duramp)
summary(fit_dur_brm)
fit_rel_brm <- brm(Nrel_intensity ~ rise + high + fall + giv + new + contr + lively + rise:giv + rise:new + rise:contr +high:giv + high:new + high:contr + fall:giv + fall:new + fall:contr + rise:lively + high:lively +fall:lively + rise:giv:lively + high:giv:lively + fall:giv:lively + rise:contr:lively + high:contr:lively + fall:contr:lively + rise:new:lively + high:new:lively + fall:new:lively + (1 + lively + giv + new + contr| subj) + (1 | subj_word), duramp)
fit_f0range <- brm(Nobj_f0range ~ rise + high + fall + giv + new + contr + lively + rise:giv + rise:new + rise:contr +high:giv + high:new + high:contr + fall:giv + fall:new + fall:contr + rise:lively + high:lively +fall:lively + rise:giv:lively + high:giv:lively + fall:giv:lively + rise:contr:lively + high:contr:lively + fall:contr:lively + rise:new:lively + high:new:lively + fall:new:lively + (1 + lively + giv + new + contr| subj) + (1 | subj_word), duramp)
fit_f0slope <- brm(Nobj_f0slope ~ rise + high + fall + giv + new + contr + lively + rise:giv + rise:new + rise:contr +high:giv + high:new + high:contr + fall:giv + fall:new + fall:contr + rise:lively + high:lively +fall:lively + rise:giv:lively + high:giv:lively + fall:giv:lively + rise:contr:lively + high:contr:lively + fall:contr:lively + rise:new:lively + high:new:lively + fall:new:lively + (1 + lively + giv + new + contr| subj) + (1 | subj_word), duramp)
summary(fit_rel_brm)
summary(fit_f0range)
summary(f0_slope)
summary(fit_f0slope)
duramp$condition <- ifelse(duramp$cond == "giv", "given", ifelse(duramp$cond == "acc", "accessible", ifelse(duramp$cond == "con", "contrastive", "new")))
duramp$condition <- factor(duramp$condition, levels = c("given", "accessible", "new", "contrastive"))
duramp$affect2 <- ifelse(duramp$affect == "lb", "lively", "neutral")
duramp$affect2 <- factor(duramp$affect2, levels = c("neutral", "lively"))
duramp$pitch_accent <- factor(duramp$pitch_accent, levels = c("high", "rise", "fall", "flat"))
duramp_all$condition <- ifelse(duramp_all$cond == "giv", "given", ifelse(duramp_all$cond == "acc", "accessible", ifelse(duramp_all$cond == "con", "contrastive", "new")))
duramp_all$condition <- factor(duramp_all$condition, levels = c("given", "accessible", "new", "contrastive"))
duramp_all$affect2 <- ifelse(duramp_all$affect == "lb", "lively", "neutral")
duramp_all$affect2 <- factor(duramp_all$affect2, levels = c("neutral", "lively"))
duramp_all %>% group_by(condition, affect2) %>% summarise(mysum = sum(Nprenuc)) -> prenuc_counts
pdf("~/Desktop/german_nuclear_prenuclear_counts.pdf", height = 7, width = 10)
ggplot(prenuc_counts) + geom_bar(aes(x = condition, y = mysum, fill = condition), stat = "identity", position = "dodge") + theme_few(22) + xlab("phrase breaks") + ylab("count") + facet_wrap(~affect2) + scale_fill_viridis_d(begin = 0.1, end = 0.9) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
# pitch accent counts
duramp_all$pitch_accent2 <- ifelse(duramp_all$prenuclear == "prenuclear", "prenuclear", as.character(duramp_all$pitch_accent))
duramp_all$pitch_accent2 <- factor(duramp_all$pitch_accent2, levels = c("high", "rise", "fall", "flat", "prenuclear"))
pdf("~/Desktop/german_nuclear_pitchaccent.pdf", height = 7, width = 10)
ggplot(duramp_all) + geom_bar(aes(x = pitch_accent2, fill = condition), position = "dodge") + theme_few(22) + xlab("pitch accent") + ylab("count") + facet_wrap(~affect2) + scale_fill_viridis_d(begin = 0.1, end = 0.9) + theme(axis.text.x = element_text(angle = 45, hjust = 1))
dev.off()
# duration
subj.means.dur <- duramp %>% group_by(subj, pitch_accent, condition, affect2) %>% summarise(dur = mean(subj_dur))
pdf("~/Desktop/german_nuclear_duration.pdf", height = 7, width = 10)
ggplot(subj.means.dur) + geom_boxplot(aes(x = pitch_accent, y = dur, fill = condition), alpha = 0.85) + theme_few(22) + xlab("pitch accent") + ylab("duration (ms)") + facet_wrap(~affect2) + scale_fill_viridis_d(begin = 0.1, end = 0.9)
dev.off()
# relative intensity
subj.means.intens <- duramp %>% group_by(subj, pitch_accent, condition, affect2) %>% summarise(rel_intensity = mean(rel_intensity))
pdf("~/Desktop/german_nuclear_rel_intensity.pdf", height = 7, width = 10)
ggplot(subj.means.intens) + geom_boxplot(aes(x = pitch_accent, y = rel_intensity, fill = condition), alpha = 0.85) + theme_few(22) + xlab("pitch accent") + ylab("relative intensity (dB)") + facet_wrap(~affect2) + scale_fill_viridis_d(begin = 0.1, end = 0.9)
dev.off()
# f0 range
subj.means.range <- duramp %>% group_by(subj, pitch_accent, condition, affect2) %>% summarise(f0range = mean(subj_f0range))
pdf("~/Desktop/german_nuclear_f0range.pdf", height = 7, width = 10)
ggplot(subj.means.range) + geom_boxplot(aes(x = pitch_accent, y = f0range, fill = condition), alpha = 0.85) + theme_few(22) + xlab("pitch accent") + ylab("f0 range (st)") + facet_wrap(~affect2) + scale_fill_viridis_d(begin = 0.1, end = 0.9)
dev.off()
# f0 slope
subj.means.slope <- duramp %>% group_by(subj, pitch_accent, condition, affect2) %>% summarise(f0slope = mean(subj_f0slope))
pdf("~/Desktop/german_prenuclear_f0slope.pdf", height = 7, width = 10)
ggplot(subj.means.slope) + geom_boxplot(aes(x = pitch_accent, y = f0slope, fill = condition), alpha = 0.85) + theme_few(22) + xlab("pitch accent") + ylab("f0 slope (st/ms)") + facet_wrap(~affect2) + scale_fill_viridis_d(begin = 0.1, end = 0.9)
dev.off()
fit_rel_brm <- brm(Nrel_intensity ~ rise + high + fall + giv + new + contr + lively + rise:giv + rise:new + rise:contr +high:giv + high:new + high:contr + fall:giv + fall:new + fall:contr + rise:lively + high:lively +fall:lively + rise:giv:lively + high:giv:lively + fall:giv:lively + rise:contr:lively + high:contr:lively + fall:contr:lively + rise:new:lively + high:new:lively + fall:new:lively + (1 + lively + giv + new + contr| subj) + (1 | subj_word), duramp)
summary(fit_rel_brm)
save.image("~/Dropbox/InformationStructureExperiment/German_Experiment/Nuclear_Accent/analysis/german_nuclear.RData")
library(readr)
sophie <- read_csv("Downloads/sophie_data.csv")
View(sophie)
require(ggplot2)
sophie %>% group_by(nsyll) %>% summarise(count = length(Accuracy))
sophie %>% group_by(`Adult Syllable Number``) %>% summarise(count = length(Accuracy))
)
sophie %>% group_by(`Adult Syllable Number) %>% summarise(count = length(Accuracy))
sophie %>% group_by(`Adult Syllable Number`) %>% summarise(count = length(Accuracy))
sophie$acc <- ifelse(sophie$Accuracy == "match", 1, 0)
sophie %>% group_by(`Adult Syllable Number`) %>% summarise(count = length(acc))
sophie %>% group_by(`Adult Syllable Number`) %>% summarise(count = sum(acc))
sophie %>% group_by(`Adult Syllable Number`) %>% summarise(count = sum(acc), total = length(acc))
d <- sophie
d %>% group_by(`Adult Word Onset`) %>% summarise(count = sum(acc), total = length(acc))
d <- subset(d, !is.na(`Adult Word Coda`))
rm(sophie)
d <- d[, 1:14]
View(d)
d <- d[, 1:13]
sophie$correct <- ifelse(sophie$Accuracy == "match", 1, 0)
d$correct <- ifelse(d$Accuracy == "match", 1, 0)
syll_acc <- d %>% group_by(`Adult Syllable Number`) %>% summarise(count = sum(correct), total = length(correct))
View(syll_acc)
ggplot(syll_acc) + geom_bar(aes(x = `Adult Syllable Number`, y = count))
ggplot(syll_acc) + geom_bar(aes(x = `Adult Syllable Number`, y = count), stat = "identity")
syll_acc$proportion_correct <- syll_acc$count / syll_acc$total
ggplot(syll_acc) + geom_bar(aes(x = `Adult Syllable Number`, y = proportion_correct), stat = "identity")
ggplot(syll_acc) + geom_bar(aes(x = `Adult Syllable Number`, y = proportion_correct), stat = "identity") + geom_text(stat = "count", aes(label = after_stat(count)), vjust = -1)
ggplot(syll_acc) + geom_bar(aes(x = `Adult Syllable Number`, y = proportion_correct), stat = "identity") + geom_text(aes(label = count))
ggplot(syll_acc, aes(x = `Adult Syllable Number`y = proportion_correct)) + geom_bar(, stat = "identity") + geom_text(aes(label = count))
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = count))
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = count), vjust = -1)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total), vjust = -1)
)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total), vjust = -0.5)
)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total), vjust = -0.5)) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct")
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total), vjust = -0.5)) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct") + theme_bw(23)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total), vjust = -0.5)) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct") + theme_bw(20)
pdf("~/Desktop/syllable_accuracy.pdf", height = 10, width = 10)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total), vjust = -0.5)) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct") + theme_bw(20)
dev.off()
pdf("~/Desktop/syllable_accuracy.pdf", height = 10, width = 10)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total), vjust = -0.5)) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct")
+ theme_bw(20)
+ theme(element_text(size=10))
dev.off()
pdf("~/Desktop/syllable_accuracy.pdf", height = 10, width = 10)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total), vjust = -0.5)) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct") + theme_bw(20) + theme(element_text(size=10))
dev.off()
pdf("~/Desktop/syllable_accuracy.pdf", height = 10, width = 10)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total), vjust = -0.5)) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct") + theme_bw(20)
dev.off()
pdf("~/Desktop/syllable_accuracy.pdf", height = 10, width = 10)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total), vjust = -0.5, size = 10)) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct") + theme_bw(20)
dev.off()
pdf("~/Desktop/syllable_accuracy.pdf", height = 10, width = 10)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total), vjust = -0.5, size = 20)) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct") + theme_bw(20)
dev.off()
pdf("~/Desktop/syllable_accuracy.pdf", height = 10, width = 10)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total), vjust = -0.5)) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct") + theme_bw(22)
dev.off()
pdf("~/Desktop/syllable_accuracy.pdf", height = 10, width = 10)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total)), vjust = -0.5, size = 20) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct") + theme_bw(20)
dev.off()
pdf("~/Desktop/syllable_accuracy.pdf", height = 10, width = 10)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total)), vjust = -0.5, size = 10) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct") + theme_bw(20)
dev.off()
pdf("~/Desktop/syllable_accuracy.pdf", height = 10, width = 10)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total)), vjust = -0.5, size = 8) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct") + theme_bw(20)
dev.off()
pdf("~/Desktop/syllable_accuracy.pdf", height = 10, width = 10)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total)), vjust = -0.5, size = 6) + xlab("Number of Syllables in Adult Form") + ylab("Proportion Correct") + theme_bw(20)
dev.off()
onset_acc <- d %>% group_by(`Adult Word Onset`) %>% summarise(count = sum(correct), total = length(correct))
onset_acc <- d %>% group_by(`Adult Word Onset`) %>% summarise(count = sum(correct), total = length(correct))
onset_acc$proportion_correct <- onset_acc$count / onset_acc$total
pdf("~/Desktop/word_onset_accuracy.pdf", height = 10, width = 10)
ggplot(onset_acc, aes(x = `Adult Word Onset`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total)), vjust = -0.5, size = 6) + xlab("Adult Word Onset") + ylab("Proportion Correct") + theme_bw(20)
dev.off()
pdf("~/Desktop/word_onset_accuracy.pdf", height = 10, width = 10)
ggplot(onset_acc, aes(x = `Adult Word Onset`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total)), vjust = -0.5, size = 6) + xlab("Adult Word Onset") + ylab("Proportion Correct") + theme_bw(20) + ylim(0, 1)
dev.off()
onset_acc$proportion_correct <- onset_acc$count / onset_acc$total
pdf("~/Desktop/word_onset_accuracy.pdf", height = 10, width = 7)
ggplot(onset_acc, aes(x = `Adult Word Onset`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total)), vjust = -0.5, size = 6) + xlab("Adult Word Onset") + ylab("Proportion Correct") + theme_bw(20) + ylim(0, 1)
dev.off()
pdf("~/Desktop/word_onset_accuracy.pdf", height = 8, width = 6)
ggplot(onset_acc, aes(x = `Adult Word Onset`, y = proportion_correct)) + geom_bar(stat = "identity") + geom_text(aes(label = paste0(count, "/", total)), vjust = -0.5, size = 6) + xlab("Adult Word Onset") + ylab("Proportion Correct") + theme_bw(20) + ylim(0, 1)
dev.off()
pdf("~/Desktop/word_onset_accuracy.pdf", height = 8, width = 6)
ggplot(onset_acc, aes(x = `Adult Word Onset`, y = proportion_correct)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(count, "/", total)), vjust = -0.5, size = 6) +
xlab("Adult Word Onset") +
ylab("Proportion Correct") +
theme_bw(20) +
ylim(0, 1)
dev.off()
pdf("~/Desktop/word_onset_accuracy.pdf", height = 7, width = 6)
ggplot(onset_acc, aes(x = `Adult Word Onset`, y = proportion_correct)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(count, "/", total)), vjust = -0.5, size = 6) +
xlab("Adult Word Onset") +
ylab("Proportion Correct") +
theme_bw(20) +
ylim(0, 1)
dev.off()
pdf("~/Desktop/syllable_accuracy.pdf", height = 10, width = 10)
ggplot(syll_acc, aes(x = `Adult Syllable Number`, y = proportion_correct)) +
geom_bar(stat = "identity") +
geom_text(aes(label = paste0(count, "/", total)), vjust = -0.5, size = 6) +
xlab("Number of Syllables in Adult Form") +
ylab("Proportion Correct") +
theme_bw(20) +
ylim(0, 1)
dev.off()
